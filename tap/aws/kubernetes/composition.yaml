
#! 
#! define a EKS clusters for tap
#!

#@ def labelObject():
type: FromCompositeFieldPath
toFieldPath: metadata.labels.tap
fromFieldPath: spec.codeName
#@ end

#@ def vpcNamePatch(toFieldPath):
type: FromCompositeFieldPath
toFieldPath: #@ toFieldPath
fromFieldPath: spec.codeName
transforms:
  - type: string
    string:
      fmt: "%s-vpc"  
#@ end

#@ def codeNameTagPatch():
type: FromCompositeFieldPath
toFieldPath: spec.forProvider.tags.tap
fromFieldPath: spec.codeName
#@ end

#@ def azNamePatch(toFieldPath,az):
type: FromCompositeFieldPath
toFieldPath: #@ toFieldPath
fromFieldPath: spec.region
transforms:
  - type: string
    string:
      fmt: #@ "%s" + az  
#@ end

#@ def regionPatch(toFieldPath):
type: FromCompositeFieldPath
toFieldPath: #@ toFieldPath
fromFieldPath: spec.region
#@ end

#@ def subnetNamePatch(toFieldPath,type,az):
type: CombineFromComposite
toFieldPath: #@ toFieldPath
combine:
  variables:
    - fromFieldPath: spec.codeName
    - fromFieldPath: spec.region
  strategy: string
  string:
    fmt: #@  "vpc-%s-" + type + "-subnet-%s" + az 
#@ end

#@ def roleNamePatch(toFieldPath,suffix):
type: CombineFromComposite
toFieldPath: #@ toFieldPath
combine:
  variables:
    - fromFieldPath: spec.codeName
    - fromFieldPath: spec.profile
    - fromFieldPath: spec.suffix
  strategy: string
  string:
    fmt: #@ "%s-%s-%s-" + suffix
#@ end

#@ def eksControlPlaneRole():
name: eks-control-plane-role
base:
  apiVersion: iam.aws.upbound.io/v1beta1
  kind: Role
  metadata:
    name: ""
  spec:
    forProvider:
      assumeRolePolicy: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "eks.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
    providerConfigRef:
      name: aws-upjet-provider
patches:
  - #@ codeNameTagPatch()
  - #@ roleNamePatch(toFieldPath="metadata.name",suffix="eks-cluster-role")
  - #@ labelObject()
#@ end

#@ def eksControlPlaneRoleAttachment():
name: eks-controlplane-role-attachment
base:
  apiVersion: iam.aws.upbound.io/v1beta1
  kind: RolePolicyAttachment
  metadata:
    name: ""
  spec:
    forProvider:
      policyArn: "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      role: ""
    providerConfigRef:
      name: aws-upjet-provider
patches:
   - #@ codeNameTagPatch()
   - #@ roleNamePatch(toFieldPath="metadata.name",suffix="eks-cluster-role")
   - #@ roleNamePatch(toFieldPath="spec.forProvider.role",suffix="eks-cluster-role")
   - #@ labelObject()
#@ end

#@ def eksNodeRole():
name: eks-node-role
base:
  apiVersion: iam.aws.upbound.io/v1beta1
  kind: Role
  metadata:
    name: ""
  spec:
    forProvider:
      assumeRolePolicy: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
    providerConfigRef:
      name: aws-upjet-provider
patches:
  - #@ codeNameTagPatch()
  - #@ roleNamePatch(toFieldPath="metadata.name",suffix="eks-node-role")
  - #@ labelObject()
#@ end

#@ def eksNodeRoleAttachment(name,policyArn):
name: #@ "eks-node-role-attachment-" + name
base:
  apiVersion: iam.aws.upbound.io/v1beta1
  kind: RolePolicyAttachment
  metadata:
    name: ""
  spec:
    forProvider:
      policyArn: #@ policyArn
      role: ""
    providerConfigRef:
      name: aws-upjet-provider
patches:
   - #@ codeNameTagPatch()
   - #@ roleNamePatch(toFieldPath="metadata.name",suffix="eks-node-role-"+name)
   - #@ roleNamePatch(toFieldPath="spec.forProvider.role",suffix="eks-node-role")
   - #@ labelObject()
#@ end


#@ def clusterNamePatch(toFieldPath):
type: CombineFromComposite
toFieldPath: #@ toFieldPath
combine:
  variables:
    - fromFieldPath: spec.codeName
    - fromFieldPath: spec.profile
    - fromFieldPath: spec.suffix
  strategy: string
  string:
    fmt: "%s-%s-%s"
#@ end

#@ def oidcIssuerPatch():
type: ToCompositeFieldPath
fromFieldPath: status.atProvider.identity[0].oidc[0].issuer
toFieldPath: status.oidcIssuer
#@ end

#@ def eksControlPlane():
name: eks-control-plane
base:
  apiVersion: eks.aws.upbound.io/v1beta1
  kind: Cluster
  metadata:
    name: ""
  spec:
    forProvider:
      region: ""
      roleArnRef:
        name: ""
      version: "1.25"
      vpcConfig:
        - subnetIdRefs:
            - name: ""
            - name: ""
            - name: ""
    providerConfigRef:
      name: aws-upjet-provider
patches:
  - #@ codeNameTagPatch()
  - #@ roleNamePatch(toFieldPath="spec.forProvider.roleArnRef.name",suffix="eks-cluster-role")
  - #@ clusterNamePatch(toFieldPath="metadata.name")
  - #@ regionPatch(toFieldPath="spec.forProvider.region")
  - #@ subnetNamePatch(toFieldPath="spec.forProvider.vpcConfig[0].subnetIdRefs[0].name",type="public",az="a")
  - #@ subnetNamePatch(toFieldPath="spec.forProvider.vpcConfig[0].subnetIdRefs[1].name",type="public",az="b")
  - #@ subnetNamePatch(toFieldPath="spec.forProvider.vpcConfig[0].subnetIdRefs[2].name",type="public",az="c")
  - #@ oidcIssuerPatch()
  - #@ labelObject()
#@ end

#@ def nodeGroupNamePatch(toFieldPath):
type: CombineFromComposite
toFieldPath: #@ toFieldPath
combine:
  variables:
    - fromFieldPath: spec.codeName
    - fromFieldPath: spec.profile
    - fromFieldPath: spec.suffix
  strategy: string
  string:
    fmt: "%s-%s-%s-node-group"
#@ end

#@ def eksNodeGroup():
name: eks-node-group
base: 
  apiVersion: eks.aws.upbound.io/v1beta1
  kind: NodeGroup
  metadata:
    name: node-group-1
  spec:
    forProvider:
      clusterNameRef:
        name: ""
      nodeRoleArnRef:
        name: ""
      region: ""
      instanceTypes:
        - m5a.xlarge
      subnetIdRefs:
        - name: ""
        - name: ""
        - name: ""
      scalingConfig:
        - desiredSize: 3
          maxSize: 3
          minSize: 3
    providerConfigRef:
      name: aws-upjet-provider
patches:
    - #@ codeNameTagPatch()
    - #@ labelObject()
    - #@ clusterNamePatch(toFieldPath="spec.forProvider.clusterNameRef.name")
    - #@ nodeGroupNamePatch(toFieldPath="metadata.name")
    - #@ roleNamePatch(toFieldPath="spec.forProvider.nodeRoleArnRef.name",suffix="eks-node-role")
    - #@ regionPatch(toFieldPath="spec.forProvider.region")
    - #@ subnetNamePatch(toFieldPath="spec.forProvider.subnetIdRefs[0].name",type="public",az="a")
    - #@ subnetNamePatch(toFieldPath="spec.forProvider.subnetIdRefs[1].name",type="public",az="b")
    - #@ subnetNamePatch(toFieldPath="spec.forProvider.subnetIdRefs[2].name",type="public",az="c")
#@ end


#@ def codeNamePatch(toFieldPath):
type: FromCompositeFieldPath
toFieldPath: #@ toFieldPath
fromFieldPath: spec.codeName
#@ end

#@ def clusterAuth():
name: cluster-auth
base:
  apiVersion: eks.aws.upbound.io/v1beta1
  kind: ClusterAuth
  metadata:
    name: ""
  spec:
    forProvider:
      clusterName: ""
      region: ""
    writeConnectionSecretToRef:
      name: cluster-conn
      namespace: green-tap
    providerConfigRef:
      name: aws-upjet-provider
patches:
  - #@ codeNameTagPatch()
  - #@ labelObject()
  - #@ clusterNamePatch(toFieldPath="metadata.name")
  - #@ clusterNamePatch(toFieldPath="spec.forProvider.clusterName")
  - #@ clusterNamePatch(toFieldPath="spec.writeConnectionSecretToRef.name")
  - #@ regionPatch(toFieldPath="spec.forProvider.region")
  - #@ codeNamePatch(toFieldPath="spec.writeConnectionSecretToRef.namespace")
#@ end

#@ def providerConfig():
name: provider-config
base:
  apiVersion: kubernetes.crossplane.io/v1alpha1
  kind: ProviderConfig
  metadata:
    name: ""
  spec:
    credentials:
      secretRef:
        key: "kubeconfig"
        name: ""
        namespace: ""
      source: Secret
patches:
  - #@ labelObject()
  - #@ clusterNamePatch(toFieldPath="metadata.name")
  - #@ clusterNamePatch(toFieldPath="spec.credentials.secretRef.name")
  - #@ codeNamePatch(toFieldPath="spec.credentials.secretRef.namespace")
#@ end

#@ def testObject():
name: test-object
base:
  apiVersion: kubernetes.crossplane.io/v1alpha1
  kind: Object
  metadata:
    name: foo
  spec:
    forProvider:
      manifest:
        apiVersion: v1
        kind: Namespace
        metadata:
          name: validation
    providerConfigRef:
      name:  eks-sample-cluster-config
patches:
  - #@ clusterNamePatch(toFieldPath="spec.providerConfigRef.name")
#@ end

#@ def irsa():
name: irsa
base:
  apiVersion: iam.aws.upbound.io/v1beta1
  kind: OpenIDConnectProvider
  metadata:
    name: example
  spec:
    forProvider:
      clientIdList: 
        - sts.amazonaws.com
      thumbprintList:
        - "9e99a48a9960b14926bb7f3b02e22da2b0ab7280"
      url: ""
    providerConfigRef:
      name: aws-upjet-provider
patches:
  - #@ codeNameTagPatch()
  - #@ labelObject()
  - #@ clusterNamePatch(toFieldPath="metadata.name")
  - type: FromCompositeFieldPath
    toFieldPath: spec.forProvider.url
    fromFieldPath: status.oidcIssuer
#@ end

apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: tap-eks-cluster
  labels:
    crossplane.io/xrd: xclusters.aws.tap.example.com
spec:
  compositeTypeRef:
    apiVersion: aws.tap.example.com/v1alpha1
    kind: XCluster     
  resources:
    - #@ eksControlPlaneRole()
    - #@ eksControlPlaneRoleAttachment()
    - #@ eksNodeRole()
    - #@ eksNodeRoleAttachment(name="node",policyArn="arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy")
    - #@ eksNodeRoleAttachment(name="ecr",policyArn="arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly")
    - #@ eksNodeRoleAttachment(name="cni",policyArn="arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy")
    - #@ eksControlPlane()
    - #@ eksNodeGroup()
    - #@ clusterAuth()
    - #@ irsa()
    - #@ providerConfig()
    - #@ testObject()
  