#@ load("@ytt:template", "template")

#!
#! This file shows how to define an aws VPC 
#! 
#! Subnets for a 10.0.0.0/16 AWS VPC, divining the VPC into 2 subnets per AZ
#! 1 public subnet, 1 private subnet and 2 spare subnets to be used in needed
#! in the future 
#! 
#! Subnet address| Range of addresses	      | Useable IPs	              | Hosts	
#! 10.0.0.0/19	  | 10.0.0.0 - 10.0.31.255	  | 10.0.0.1 - 10.0.31.254	  | 8190	
#! 10.0.32.0/19	| 10.0.32.0 - 10.0.63.255	  | 10.0.32.1 - 10.0.63.254	  | 8190	
#! 10.0.64.0/19	| 10.0.64.0 - 10.0.95.255	  | 10.0.64.1 - 10.0.95.254	  | 8190	
#! 10.0.96.0/19	| 10.0.96.0 - 10.0.127.255	| 10.0.96.1 - 10.0.127.254	| 8190	
#! 10.0.128.0/19	| 10.0.128.0 - 10.0.159.255	| 10.0.128.1 - 10.0.159.254	| 8190	
#! 10.0.160.0/19	| 10.0.160.0 - 10.0.191.255	| 10.0.160.1 - 10.0.191.254	| 8190	
#! 10.0.192.0/19	| 10.0.192.0 - 10.0.223.255	| 10.0.192.1 - 10.0.223.254	| 8190	
#! 10.0.224.0/19	| 10.0.224.0 - 10.0.255.255	| 10.0.224.1 - 10.0.255.254	| 8190	
#! 

#@ def subnetName(type,vpc,region,az):
#@ return vpc + "-" + type + "-subnet-" + region + az
#@ end 

#@ def subnet(type,vpc,region,az,cidr):
apiVersion: ec2.aws.upbound.io/v1beta1
kind: Subnet
metadata:
  name: #@ subnetName(type,vpc,region,az)
spec:
  forProvider:
    vpcIdRef:
      name: #@ vpc
    tags: 
      Name: #@ subnetName(type,vpc,region,az)
    region: #@ region
    availabilityZone: #@ region + az
    cidrBlock: #@ cidr
  providerConfigRef:
    name: aws-upjet-provider
#@ end

---
#@ def vpc(name, region): 
---
apiVersion: ec2.aws.upbound.io/v1beta1
kind: VPC
metadata:
  name: #@ name
spec:
  forProvider:
    cidrBlock: 10.0.0.0/16
    region: #@ region
    enableDnsSupport: true
    enableDnsHostnames: true
    instanceTenancy: default
    tags: 
      Name: #@ name
  providerConfigRef:
    name: aws-upjet-provider
--- #@ subnet(vpc="tap", region="us-east-1", az="a", cidr="10.0.0.0/19", type="public",)
--- #@ subnet(vpc="tap", region="us-east-1", az="a", cidr="10.0.32.0/19", type="private")

--- #@ subnet(vpc="tap", region="us-east-1", az="b", cidr="10.0.64.0/19", type="public",)
--- #@ subnet(vpc="tap", region="us-east-1", az="b", cidr="10.0.96.0/19", type="private")

--- #@ subnet(vpc="tap", region="us-east-1", az="c", cidr="10.0.128.0/19", type="public",)
--- #@ subnet(vpc="tap", region="us-east-1", az="c", cidr="10.0.160.0/19", type="private")

--- #@ internetGateway(vpc="tap",region="us-east-1")

--- #@ elasticIp( name= natGatewayElasticIpName(vpc="tap",region="us-east-1",az="a"),region="us-east-1")
--- #@ elasticIp( name= natGatewayElasticIpName(vpc="tap",region="us-east-1",az="b"),region="us-east-1")
--- #@ natGateway(vpc="tap",region="us-east-1", az="a")
--- #@ natGateway(vpc="tap",region="us-east-1", az="b")

--- #@ defaultRouteTable(vpc="tap", region="us-east-1")

--- #@ routeTable(vpc="tap",region="us-east-1", type="public")
--- #@ routeToInternetGateway(vpc="tap",region="us-east-1")

--- #@ routeTable(vpc="tap",region="us-east-1", type="private")
--- #@ routeToNatGateway(vpc="tap",region="us-east-1",az="a")
--- #@ routeToNatGateway(vpc="tap",region="us-east-1",az="b")
#@ end
---

#@ def internetGatewayName(vpc):
#@ return vpc + "-internet-gateway"
#@ end

#@ def internetGateway(vpc, region): 
apiVersion: ec2.aws.upbound.io/v1beta1
kind: InternetGateway
metadata:
  name: #@ internetGatewayName(vpc)
spec:
  forProvider:
    region: #@ region
    tags:
      Name:  #@ internetGatewayName(vpc)
    vpcIdRef:
      name: #@ vpc
  providerConfigRef:
    name: aws-upjet-provider
#@ end

#@ def defaultRouteTable(vpc,region):
apiVersion: ec2.aws.upbound.io/v1beta1
kind: DefaultRouteTable
metadata:
  name: #@ vpc + "-route-table-main"
spec:
  forProvider:
    defaultRouteTableIdRef:
      name: #@ vpc
    region: #@ region
    route:
      - cidrBlock: 0.0.0.0/0
        gatewayIdRef:
          name: #@ internetGatewayName(vpc)
    tags:
      Name: #@ vpc + "-route-table-main"
  providerConfigRef:
    name: aws-upjet-provider
#@ end

#@ def routeTableName(vpc,region,type):
#@  return vpc + "-route-table-" + type
#@ end

#@ def routeTable(vpc,region,type):
apiVersion: ec2.aws.upbound.io/v1beta1
kind: RouteTable
metadata:
  name: #@ routeTableName(vpc=vpc,region=region,type=type)
spec:
  forProvider:
    region: #@ region
    tags:
      Name: #@ routeTableName(vpc=vpc,region=region,type=type)
    vpcIdRef:
      name: #@ vpc 
  providerConfigRef:
    name: aws-upjet-provider
#@ end

#@ def routeToInternetGateway(vpc,region):
apiVersion: ec2.aws.upbound.io/v1beta1
kind: Route
metadata:
  name: public-subnets-default-route
spec:
  forProvider:
    destinationCidrBlock: 0.0.0.0/0
    gatewayIdRef:
      name: #@ internetGatewayName(vpc)
    region: #@ region
    routeTableIdRef:
      name: #@ routeTableName(vpc=vpc,region=region,type="public")
  providerConfigRef:
    name: aws-upjet-provider
#@ end

#@ def routeToNatGateway(vpc,region,az):
apiVersion: ec2.aws.upbound.io/v1beta1
kind: Route
metadata:
  name: private-subnets-default-route
spec:
  forProvider:
    destinationCidrBlock: 0.0.0.0/0
    natGatewayIdRef:
      name: #@ natGatewayName(vpc=vpc,region=region,az=az) 
    region: #@ region
    routeTableIdRef:
      name: #@ routeTableName(vpc=vpc,region=region,type="private")
  providerConfigRef:
    name: aws-upjet-provider
#@ end

#@ def elasticIp(region,name):
apiVersion: ec2.aws.upbound.io/v1beta1
kind: EIP
metadata:
  name: #@ name
spec:
  forProvider:
    region: #@ region
    vpc: true
    tags: 
      Name: #@ name
  providerConfigRef:
    name: aws-upjet-provider
#@ end

#@ def natGatewayName(vpc,region,az):
#@   return vpc + "-nat-gateway-" + region + az 
#@ end

#@ def natGatewayElasticIpName(vpc,region,az):
#@   return vpc + "-eip-nat-gateway-" + region + az 
#@ end

#@ def natGateway(vpc,region,az):
apiVersion: ec2.aws.upbound.io/v1beta1
kind: NATGateway
metadata:
  name: #@ natGatewayName(vpc=vpc,region=region,az=az) 
spec:
  forProvider:
    connectivityType: public
    region: #@ region
    subnetIdRef:
      name:  #@ subnetName(type="public",vpc=vpc,region=region,az=az)
    allocationIdRef:
      name: #@ natGatewayElasticIpName(vpc=vpc,region=region,az=az)
    tags:
      Name:  #@ natGatewayName(vpc=vpc,region=region,az=az)
  providerConfigRef:
    name: aws-upjet-provider
#@ end

#! Subnet address | Range of addresses	      | Useable IPs	              | Hosts	
#! 10.0.0.0/19	  | 10.0.0.0 - 10.0.31.255	  | 10.0.0.1 - 10.0.31.254	  | 8190	
#! 10.0.32.0/19	  | 10.0.32.0 - 10.0.63.255	  | 10.0.32.1 - 10.0.63.254	  | 8190	
#! 10.0.64.0/19	  | 10.0.64.0 - 10.0.95.255	  | 10.0.64.1 - 10.0.95.254	  | 8190	
#! 10.0.96.0/19	  | 10.0.96.0 - 10.0.127.255	| 10.0.96.1 - 10.0.127.254	| 8190	
#! 10.0.128.0/19	| 10.0.128.0 - 10.0.159.255	| 10.0.128.1 - 10.0.159.254	| 8190	
#! 10.0.160.0/19	| 10.0.160.0 - 10.0.191.255	| 10.0.160.1 - 10.0.191.254	| 8190	
#! 10.0.192.0/19	| 10.0.192.0 - 10.0.223.255	| 10.0.192.1 - 10.0.223.254	| 8190	
#! 10.0.224.0/19	| 10.0.224.0 - 10.0.255.255	| 10.0.224.1 - 10.0.255.254	| 8190	
#! 

--- #@ template.replace(vpc(name="tap", region="us-east-1"))


